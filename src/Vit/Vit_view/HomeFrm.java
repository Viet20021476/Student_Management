/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vit.view;

import Vit.model.Register;
import Vit.model.Student;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import Vit.model.Subject;
import Vit.sort.ASCSort;
import Vit.sort.AZNameSort_Rgs;
import Vit.sort.AZNameSort_Std;
import Vit.sort.AZSort;
import Vit.sort.SortStdBDEtoL;
import Vit.sort.DESSort;
import Vit.sort.SortRgsEtoL;
import Vit.sort.SortRgsLtoE;
import Vit.sort.SortStdBDLtoE;
import Vit.sort.ZANameSort_Rgs;
import Vit.sort.ZANameSort_Std;
import Vit.sort.ZASort;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {

    private DefaultTableModel tableModel;
    private DefaultTableModel tableMode2;
    private DefaultTableModel tableMode3;

    private ArrayList<Subject> subjects_list = new ArrayList<>();
    private ArrayList<Student> students_list = new ArrayList<>();
    private ArrayList<Register> registers_list = new ArrayList<>();

    private int editedSbjIndex;
    private int deleteSbjIndex;

    private int editedStdIndex;
    private int deleteStdIndex;

    private int editedRgsIndex;
    private int deleteRgsIndex;

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);

        tableModel = (DefaultTableModel) TbSubj.getModel();
        tableMode2 = (DefaultTableModel) TbStudent.getModel();
        tableMode3 = (DefaultTableModel) TBRegister.getModel();

        subjects_list = readSubjectsFromDB();
        students_list = readStudentsFromDB();
        registers_list = readRegisterFromDB();

        showAllSubjects(subjects_list);
        showAllStudents(students_list);
        showAllRegisters(registers_list);

        addActionListener();
        addSortSubjectButtonGroup();
        addSortStudentButtonGroup();

        addFindSubjectLabelGroup();
        addFindStudentButtonGroup();
        addFindRgsButtonGroup();

        setClW();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortButtonGroup = new javax.swing.ButtonGroup();
        findButtonGroup = new javax.swing.ButtonGroup();
        StudentSortbuttonGroup = new javax.swing.ButtonGroup();
        FindStudentbuttonGroup = new javax.swing.ButtonGroup();
        FindRgsbuttonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        SortLssDESbtn = new javax.swing.JRadioButton();
        SortLssASCbtn = new javax.swing.JRadioButton();
        SortNamezabtn = new javax.swing.JRadioButton();
        SortNameazbtn = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        findSbjByNameLabel = new javax.swing.JRadioButton();
        txtFindSbjByName = new javax.swing.JTextField();
        findSbjByLssLabel = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtSbjFrom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSbjTo = new javax.swing.JTextField();
        FindButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TbSubj = new javax.swing.JTable();
        editSubjectbutton = new javax.swing.JButton();
        deleteSubjectbutton = new javax.swing.JButton();
        addNewSubjectbutton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        SeeSbjInfobutton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        SortStdNameazbtn = new javax.swing.JRadioButton();
        SortStdNamezabtn = new javax.swing.JRadioButton();
        SortStdBDLtoE = new javax.swing.JRadioButton();
        SortStdBDEtoL = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        findStdByNameLabel = new javax.swing.JRadioButton();
        txtFindStdByName = new javax.swing.JTextField();
        findStdByIdLabel = new javax.swing.JRadioButton();
        FindStudentButton = new javax.swing.JButton();
        txtFindStdById = new javax.swing.JTextField();
        findStdByMajorLabel = new javax.swing.JRadioButton();
        CBBFindStd = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        TbStudent = new javax.swing.JTable();
        editStudentbutton = new javax.swing.JButton();
        deleteStudentbutton = new javax.swing.JButton();
        addNewStudentbutton = new javax.swing.JButton();
        refreshStdButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        CbbSortRegister = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        FindRgsByStdNamebtn = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtFindRgsByStdName = new javax.swing.JTextField();
        FindRgsByTimebtn = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        txtFindRgsByTimefrom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFindRgsByTimeto = new javax.swing.JTextField();
        findRegisterButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TBRegister = new javax.swing.JTable();
        refreshRG = new javax.swing.JButton();
        addNewRegisterbutton = new javax.swing.JButton();
        deleteRegister = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        turnOffItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ ĐĂNG KÝ MÔN HỌC");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sắp xếp môn học"));

        SortLssDESbtn.setText("Số tiết giảm dần");

        SortLssASCbtn.setText("Số tiết tăng dần");

        SortNamezabtn.setText("Tên môn học z-a");

        SortNameazbtn.setText("Tên môn học a-z");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SortLssDESbtn)
                    .addComponent(SortLssASCbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SortNamezabtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SortNameazbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SortLssDESbtn)
                    .addComponent(SortNamezabtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SortLssASCbtn)
                    .addComponent(SortNameazbtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm môn học"));

        findSbjByNameLabel.setText("Theo tên gần đúng");

        findSbjByLssLabel.setText("Theo số tiết học");

        jLabel1.setText("Từ:");

        jLabel2.setText("Đến:");

        FindButton.setText("Tìm");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findSbjByNameLabel)
                    .addComponent(findSbjByLssLabel))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSbjFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSbjTo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(FindButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtFindSbjByName, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findSbjByNameLabel)
                    .addComponent(txtFindSbjByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findSbjByLssLabel)
                    .addComponent(jLabel1)
                    .addComponent(txtSbjFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtSbjTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FindButton))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        TbSubj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TbSubj.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn", "Tên môn", "Thể loại", "Số tiết"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TbSubj);

        editSubjectbutton.setText("Sửa môn học");

        deleteSubjectbutton.setText("Xóa môn học");

        addNewSubjectbutton.setText("Thêm môn học");

        refreshButton.setText("Làm mới");

        SeeSbjInfobutton.setText("Xem thông tin môn");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(addNewSubjectbutton)
                .addGap(65, 65, 65)
                .addComponent(editSubjectbutton)
                .addGap(65, 65, 65)
                .addComponent(deleteSubjectbutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(SeeSbjInfobutton)
                .addGap(63, 63, 63))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(addNewSubjectbutton)
                    .addComponent(editSubjectbutton)
                    .addComponent(deleteSubjectbutton)
                    .addComponent(SeeSbjInfobutton))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÔN HỌC", jPanel1);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Sắp xếp sinh viên"));

        SortStdNameazbtn.setText("Theo tên từ a-z");

        SortStdNamezabtn.setText("Theo tên từ z-a");

        SortStdBDLtoE.setText("Theo ngày sinh muộn đến sớm");

        SortStdBDEtoL.setText("Theo ngày sinh sớm đến muộn");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SortStdNamezabtn)
                    .addComponent(SortStdNameazbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SortStdBDLtoE)
                    .addComponent(SortStdBDEtoL))
                .addGap(26, 26, 26))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SortStdNameazbtn)
                    .addComponent(SortStdBDEtoL))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SortStdNamezabtn)
                    .addComponent(SortStdBDLtoE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm sinh viên"));

        findStdByNameLabel.setText("Theo tên");

        findStdByIdLabel.setText("Theo mã sinh viên");

        FindStudentButton.setText("Tìm");

        findStdByMajorLabel.setText("Theo chuyên ngành");

        CBBFindStd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Công nghệ thông tin", "Điện tử viễn thông", "Quản trị kinh doanh", "Khoa học dữ liệu", "Cơ điện tử", "Máy tính và Robot", " " }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findStdByNameLabel)
                    .addComponent(findStdByIdLabel)
                    .addComponent(findStdByMajorLabel))
                .addGap(21, 21, 21)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CBBFindStd, 0, 169, Short.MAX_VALUE)
                    .addComponent(txtFindStdByName, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(txtFindStdById))
                .addGap(20, 20, 20)
                .addComponent(FindStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findStdByNameLabel)
                    .addComponent(txtFindStdByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findStdByIdLabel)
                    .addComponent(txtFindStdById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findStdByMajorLabel)
                    .addComponent(CBBFindStd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FindStudentButton))
                .addGap(20, 20, 20))
        );

        TbStudent.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TbStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Họ và tên", "Ngày sinh", "Địa chỉ", "Email", "Số điện thoại", "Lớp", "Chuyên ngành", "Niên khóa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TbStudent);

        editStudentbutton.setText("Sửa sinh viên");

        deleteStudentbutton.setText("Xóa sinh viên");

        addNewStudentbutton.setText("Thêm sinh viên");

        refreshStdButton.setText("Làm mới");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(refreshStdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102)
                .addComponent(addNewStudentbutton)
                .addGap(102, 102, 102)
                .addComponent(editStudentbutton)
                .addGap(102, 102, 102)
                .addComponent(deleteStudentbutton)
                .addGap(102, 102, 102))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editStudentbutton)
                    .addComponent(deleteStudentbutton)
                    .addComponent(refreshStdButton)
                    .addComponent(addNewStudentbutton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("QUẢN LÝ SINH VIÊN", jPanel4);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Sắp xếp và tìm kiếm bản đăng ký"));

        jLabel3.setText("Sắp xếp bảng đăng ký theo:");

        CbbSortRegister.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên sinh viên tăng dần từ a-z", "Tên sinh viên giảm dần từ z-a", "Thời gian đăng ký sớm-muộn", "Thời gian đăng ký muộn-sớm" }));

        FindRgsByStdNamebtn.setText("Tìm kiếm theo tên sinh viên:");

        jLabel4.setText("Nhập tên sinh viên:");

        FindRgsByTimebtn.setText("Tìm kiếm theo thời gian đăng ký:");

        jLabel5.setText("Từ ngày:");

        jLabel6.setText("Đến ngày:");

        findRegisterButton.setText("Tìm kiếm");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3)
                        .addGap(42, 42, 42)
                        .addComponent(CbbSortRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FindRgsByStdNamebtn)
                    .addComponent(FindRgsByTimebtn))
                .addGap(35, 35, 35)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFindRgsByStdName)
                    .addComponent(txtFindRgsByTimefrom)
                    .addComponent(txtFindRgsByTimeto, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(findRegisterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CbbSortRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FindRgsByStdNamebtn)
                    .addComponent(jLabel4)
                    .addComponent(txtFindRgsByStdName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FindRgsByTimebtn)
                    .addComponent(jLabel5)
                    .addComponent(txtFindRgsByTimefrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtFindRgsByTimeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findRegisterButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TBRegister.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Lớp", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TBRegister);

        refreshRG.setText("Làm mới");

        addNewRegisterbutton.setText("Thêm đăng ký");

        deleteRegister.setText("Xóa đăng ký");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(refreshRG, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160)
                .addComponent(addNewRegisterbutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addComponent(deleteRegister)
                .addGap(159, 159, 159))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshRG)
                    .addComponent(addNewRegisterbutton)
                    .addComponent(deleteRegister))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐĂNG KÝ", jPanel8);

        jMenu1.setText("File");

        turnOffItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        turnOffItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vit.images/turn-off-24px.png"))); // NOI18N
        turnOffItem.setText("Thoát ");
        turnOffItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffItemActionPerformed(evt);
            }
        });
        jMenu1.add(turnOffItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void turnOffItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffItemActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_turnOffItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Window".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    public void setClW() {
        TbStudent.getColumnModel().getColumn(0).setPreferredWidth(35);
        TbStudent.getColumnModel().getColumn(2).setPreferredWidth(25);
        TbStudent.getColumnModel().getColumn(4).setPreferredWidth(100);
        TbStudent.getColumnModel().getColumn(8).setPreferredWidth(40);
    }

    public void showSubject(Subject sbj) {
        var row = new Object[]{
            sbj.getSubj_Id(), sbj.getSubj_Name(), sbj.getType(), sbj.getNumOfLessons()
        };
        tableModel.addRow(row);
        tableModel.fireTableDataChanged();
    }

    public void showAllSubjects(ArrayList<Subject> subjects_list) {
        for (var sbj : subjects_list) {
            showSubject(sbj);
        }
    }

    public void showLastSubject() {
        showSubject(subjects_list.get(subjects_list.size() - 1));
    }

    public void deleteSubjectinTB(int index) {
        subjects_list.remove(index);
        tableModel.removeRow(index);
        tableModel.fireTableDataChanged();
        JOptionPane.showMessageDialog(rootPane, "Xóa thành công!");
    }

    public int writeSubjectTODB(Subject sbj) {
        Connection connection = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql1 = "INSERT INTO subject(`id`, `name`, `type`, `numOfLessons`) VALUES (?,?,?,?)";
            PreparedStatement statement1 = connection.prepareStatement(sql1);

            statement1.setString(1, sbj.getSubj_Id());
            statement1.setString(2, sbj.getSubj_Name());
            statement1.setString(3, sbj.getType());
            statement1.setInt(4, sbj.getNumOfLessons());

            return statement1.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public void updateSubjectTable(Subject sbj, int editedIndex) {
        var row = new Object[]{
            sbj.getSubj_Id(), sbj.getSubj_Name(), sbj.getType(), sbj.getNumOfLessons()
        };
        subjects_list.remove(editedIndex);
        subjects_list.add(editedIndex, sbj);
        tableModel.removeRow(editedIndex);
        tableModel.insertRow(editedIndex, row);
        tableModel.fireTableDataChanged();
    }

    public int updateDB(String id, String name, String type, int numOfLss) {
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql2 = "UPDATE subject SET id = ?,name = ?,type = ?,numOfLessons = ? WHERE id = ?";
            PreparedStatement statement2 = connection.prepareStatement(sql2);

            statement2.setString(1, id);
            statement2.setString(2, name);
            statement2.setString(3, type);
            statement2.setInt(4, numOfLss);
            statement2.setString(5, id);

            return statement2.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public int deleteSubjectinDB(String id) {
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql3 = "DELETE FROM subject WHERE id = ?";
            PreparedStatement statement3 = connection.prepareStatement(sql3);

            statement3.setString(1, id);

            return statement3.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public ArrayList<Subject> readSubjectsFromDB() {
        ArrayList<Subject> subjects_list = new ArrayList<>();
        Connection connection = null;
        Statement statement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql = "SELECT * FROM subject";
            statement = connection.createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Subject sbj = new Subject(resultset.getString("id"), resultset.getString("name"),
                        resultset.getString("type"), resultset.getInt("numOfLessons"));

                subjects_list.add(sbj);
            }
        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }

        return subjects_list;
    }

    public ArrayList<Student> readStudentsFromDB() {
        ArrayList<Student> students_list = new ArrayList<>();
        Connection connection = null;
        Statement statement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql = "SELECT * FROM student";
            statement = connection.createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Student std = new Student(resultset.getString("ps_id"), resultset.getString("fullName"),
                        resultset.getString("birthDate"), resultset.getString("address"),
                        resultset.getString("email"), resultset.getString("phoneNumber"), resultset.getString("std_id"),
                        resultset.getString("std_class"), resultset.getString("major"), resultset.getString("academic_year"));

                students_list.add(std);
            }
        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }

        return students_list;
    }

    public void showStudent(Student std) {
        var row = new Object[]{
            std.getStd_id(), std.getFullName(), std.getBirthDate(), std.getAddress(), std.getEmail(),
            std.getPhoneNumber(), std.getStd_class(), std.getMajor(), std.getAcademic_year()
        };
        tableMode2.addRow(row);
        tableMode2.fireTableDataChanged();
    }

    public void showLastStudent() {
        showStudent(students_list.get(students_list.size() - 1));
    }

    public void showAllStudents(ArrayList<Student> students_list) {
        for (var std : students_list) {
            showStudent(std);
        }
    }

    public int writeStudentToDB(Student std) {
        Connection connection = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql1 = "INSERT INTO student(`ps_id`, `fullName`, `birthDate`, `address`, `email`,"
                    + " `phoneNumber`, `std_id`, `std_class`, `major`, `academic_year`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement statement1 = connection.prepareStatement(sql1);

            statement1.setString(1, std.getPs_id());
            statement1.setString(2, std.getFullName());
            statement1.setString(3, std.getBirthDate());
            statement1.setString(4, std.getAddress());
            statement1.setString(5, std.getEmail());
            statement1.setString(6, std.getPhoneNumber());
            statement1.setString(7, std.getStd_id());
            statement1.setString(8, std.getStd_class());
            statement1.setString(9, std.getMajor());
            statement1.setString(10, std.getAcademic_year());

            return statement1.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public void updateStudentTable(Student std, int editedIndex) {
        var row = new Object[]{
            std.getStd_id(), std.getFullName(), std.getBirthDate(), std.getAddress(), std.getEmail(),
            std.getPhoneNumber(), std.getStd_class(), std.getMajor(), std.getAcademic_year()
        };
        students_list.remove(editedIndex);
        students_list.add(editedIndex, std);
        tableMode2.removeRow(editedIndex);
        tableMode2.insertRow(editedIndex, row);
        tableModel.fireTableDataChanged();
    }

    public int updateStudentDB(Student student) {
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql2 = "UPDATE student SET ps_id = ?,fullName = ?,birthDate = ?,address = ?,"
                    + "email = ?,phoneNumber = ?,std_id = ?,std_class = ?,major = ?,academic_year = ? WHERE ps_id = ?";
            PreparedStatement statement2 = connection.prepareStatement(sql2);

            statement2.setString(1, student.getPs_id());
            statement2.setString(2, student.getFullName());
            statement2.setString(3, student.getBirthDate());
            statement2.setString(4, student.getAddress());
            statement2.setString(5, student.getEmail());
            statement2.setString(6, student.getPhoneNumber());
            statement2.setString(7, student.getStd_id());
            statement2.setString(8, student.getStd_class());
            statement2.setString(9, student.getMajor());
            statement2.setString(10, student.getAcademic_year());
            statement2.setString(11, student.getPs_id());

            return statement2.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public int deleteStudentinDB(String std_id) {
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql3 = "DELETE FROM student WHERE std_id = ?";
            PreparedStatement statement3 = connection.prepareStatement(sql3);

            statement3.setString(1, std_id);

            return statement3.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public void deleteStudentinTB(int index) {
        students_list.remove(index);
        tableMode2.removeRow(index);
        tableMode2.fireTableDataChanged();
        JOptionPane.showMessageDialog(rootPane, "Xóa thành công");
    }

    public ArrayList<Register> readRegisterFromDB() {
        ArrayList<Register> registers_list = new ArrayList<>();
        Connection connection = null;
        Statement statement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql = "SELECT * FROM register";
            statement = connection.createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Register register = new Register(findStudentByStd_Id(resultset.getString("std_id")),
                        findSubjectById(resultset.getString("sbj_id")), resultset.getString("register_time"));
                registers_list.add(register);
            }
        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }

        return registers_list;
    }

    public void showRegister(Register register) {
        var row = new Object[]{
            register.getStudent().getStd_id(), register.getStudent().getFullName(), register.getStudent().getStd_class(),
            register.getSubject().getSubj_Id(), register.getSubject().getSubj_Name(), register.getRegisterDate()
        };
        tableMode3.addRow(row);
        tableMode3.fireTableDataChanged();

    }

    public void showLastRegister() {
        showRegister(registers_list.get(registers_list.size() - 1));
    }

    public void showAllRegisters(ArrayList<Register> registers_list) {
        for (var rgs : registers_list) {
            showRegister(rgs);
        }
    }

    public int writeRegisterToDB(Register register) {
        Connection connection = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql1 = "INSERT INTO `register`(`std_id`, `std_name`, `std_class`, `sbj_id`, `sbj_name`, `register_time`)"
                    + " VALUES (?,?,?,?,?,?)";
            PreparedStatement statement1 = connection.prepareStatement(sql1);

            statement1.setString(1, register.getStudent().getStd_id());
            statement1.setString(2, register.getStudent().getFullName());
            statement1.setString(3, register.getStudent().getStd_class());
            statement1.setString(4, register.getSubject().getSubj_Id());
            statement1.setString(5, register.getSubject().getSubj_Name());
            statement1.setString(6, register.getRegisterDate());

            return statement1.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public int deleteRegisterinDB(Register register) {
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "");
            String sql3 = "DELETE FROM register WHERE std_id = ? AND sbj_id = ?";
            PreparedStatement statement3 = connection.prepareStatement(sql3);

            statement3.setString(1, register.getStudent().getStd_id());
            statement3.setString(2, register.getSubject().getSubj_Id());

            return statement3.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public void deleteRegisterinTB(int index) {
        registers_list.remove(index);
        tableMode3.removeRow(index);
        tableMode3.fireTableDataChanged();
        JOptionPane.showMessageDialog(rootPane, "Xóa thành công");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBBFindStd;
    private javax.swing.JComboBox<String> CbbSortRegister;
    private javax.swing.JButton FindButton;
    private javax.swing.JRadioButton FindRgsByStdNamebtn;
    private javax.swing.JRadioButton FindRgsByTimebtn;
    private javax.swing.ButtonGroup FindRgsbuttonGroup;
    private javax.swing.JButton FindStudentButton;
    private javax.swing.ButtonGroup FindStudentbuttonGroup;
    private javax.swing.JButton SeeSbjInfobutton;
    private javax.swing.JRadioButton SortLssASCbtn;
    private javax.swing.JRadioButton SortLssDESbtn;
    private javax.swing.JRadioButton SortNameazbtn;
    private javax.swing.JRadioButton SortNamezabtn;
    private javax.swing.JRadioButton SortStdBDEtoL;
    private javax.swing.JRadioButton SortStdBDLtoE;
    private javax.swing.JRadioButton SortStdNameazbtn;
    private javax.swing.JRadioButton SortStdNamezabtn;
    private javax.swing.ButtonGroup StudentSortbuttonGroup;
    private javax.swing.JTable TBRegister;
    private javax.swing.JTable TbStudent;
    private javax.swing.JTable TbSubj;
    private javax.swing.JButton addNewRegisterbutton;
    private javax.swing.JButton addNewStudentbutton;
    private javax.swing.JButton addNewSubjectbutton;
    private javax.swing.JButton deleteRegister;
    private javax.swing.JButton deleteStudentbutton;
    private javax.swing.JButton deleteSubjectbutton;
    private javax.swing.JButton editStudentbutton;
    private javax.swing.JButton editSubjectbutton;
    private javax.swing.ButtonGroup findButtonGroup;
    private javax.swing.JButton findRegisterButton;
    private javax.swing.JRadioButton findSbjByLssLabel;
    private javax.swing.JRadioButton findSbjByNameLabel;
    private javax.swing.JRadioButton findStdByIdLabel;
    private javax.swing.JRadioButton findStdByMajorLabel;
    private javax.swing.JRadioButton findStdByNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton refreshRG;
    private javax.swing.JButton refreshStdButton;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JMenuItem turnOffItem;
    private javax.swing.JTextField txtFindRgsByStdName;
    private javax.swing.JTextField txtFindRgsByTimefrom;
    private javax.swing.JTextField txtFindRgsByTimeto;
    private javax.swing.JTextField txtFindSbjByName;
    private javax.swing.JTextField txtFindStdById;
    private javax.swing.JTextField txtFindStdByName;
    private javax.swing.JTextField txtSbjFrom;
    private javax.swing.JTextField txtSbjTo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();

        if (obj.equals(addNewSubjectbutton)) {
            addNewSubject();
        } else if (obj.equals(editSubjectbutton)) {
            editSubject();
        } else if (obj.equals(deleteSubjectbutton)) {
            deleteSubject();
        } else if (obj.equals(SortLssDESbtn)
                || obj.equals(SortLssASCbtn)
                || obj.equals(SortNameazbtn)
                || obj.equals(SortNamezabtn)) {
            sortSubjects(obj);
        } else if (obj.equals(findSbjByNameLabel)) {
            txtFindSbjByName.setEnabled(true);
            txtSbjFrom.setEnabled(false);
            txtSbjTo.setEnabled(false);
        } else if (obj.equals(findSbjByLssLabel)) {
            txtFindSbjByName.setEnabled(false);
            txtSbjFrom.setEnabled(true);
            txtSbjTo.setEnabled(true);
        } else if (obj.equals(FindButton)) {
            findSubject();
        } else if (obj.equals(refreshButton)) {
            refreshSubject();
        } else if (obj.equals(addNewStudentbutton)) {
            addNewStudent();
        } else if (obj.equals(editStudentbutton)) {
            editStudent();
        } else if (obj.equals(deleteStudentbutton)) {
            deleteStudent();
        } else if (obj.equals(SortStdNameazbtn)
                || obj.equals(SortStdNamezabtn)
                || obj.equals(SortStdBDLtoE)
                || obj.equals(SortStdBDEtoL)) {
            SortStudent(obj);
        } else if (obj.equals(findStdByNameLabel)) {
            txtFindStdByName.setEnabled(true);
            txtFindStdById.setEnabled(false);
            CBBFindStd.setEnabled(false);
        } else if (obj.equals(findStdByIdLabel)) {
            txtFindStdById.setEnabled(true);
            txtFindStdByName.setEnabled(false);
            CBBFindStd.setEnabled(false);
        } else if (obj.equals(findStdByMajorLabel)) {
            CBBFindStd.setEnabled(true);
            txtFindStdByName.setEnabled(false);
            txtFindStdById.setEnabled(false);
        } else if (obj.equals(FindStudentButton)) {
            findStudent();
        } else if (obj.equals(refreshStdButton)) {
            refreshStudent();
        } else if (obj.equals(addNewRegisterbutton)) {
            addNewRegister();
        } else if (obj.equals(deleteRegister)) {
            deleteRegister();
        } else if (obj.equals(CbbSortRegister)) {
            sortRegister();
        } else if (obj.equals(FindRgsByStdNamebtn)) {
            txtFindRgsByStdName.setEnabled(true);
            txtFindRgsByTimefrom.setEnabled(false);
            txtFindRgsByTimeto.setEnabled(false);
        } else if (obj.equals(FindRgsByTimebtn)) {
            txtFindRgsByTimefrom.setEnabled(true);
            txtFindRgsByTimeto.setEnabled(true);
            txtFindRgsByStdName.setEnabled(false);
        } else if (obj.equals(findRegisterButton)) {
            findRegister();
        } else if (obj.equals(refreshRG)) {
            refreshRegister();
        } else if (obj.equals(SeeSbjInfobutton)) {
            showSubjectInfo();
        }
    }

    public void addActionListener() {
        addNewSubjectbutton.addActionListener(this);
        editSubjectbutton.addActionListener(this);
        deleteSubjectbutton.addActionListener(this);
        refreshButton.addActionListener(this);
        SortLssASCbtn.addActionListener(this);
        SortLssDESbtn.addActionListener(this);
        SortNameazbtn.addActionListener(this);
        SortNamezabtn.addActionListener(this);
        findSbjByNameLabel.addActionListener(this);
        findSbjByLssLabel.addActionListener(this);
        FindButton.addActionListener(this);
        addNewStudentbutton.addActionListener(this);
        editStudentbutton.addActionListener(this);
        deleteStudentbutton.addActionListener(this);
        SortStdNameazbtn.addActionListener(this);
        SortStdNamezabtn.addActionListener(this);
        SortStdBDLtoE.addActionListener(this);
        SortStdBDEtoL.addActionListener(this);
        FindStudentButton.addActionListener(this);
        findStdByNameLabel.addActionListener(this);
        findStdByIdLabel.addActionListener(this);
        findStdByMajorLabel.addActionListener(this);
        refreshStdButton.addActionListener(this);
        addNewRegisterbutton.addActionListener(this);
        deleteRegister.addActionListener(this);
        CbbSortRegister.addActionListener(this);
        FindRgsByStdNamebtn.addActionListener(this);
        FindRgsByTimebtn.addActionListener(this);
        findRegisterButton.addActionListener(this);
        refreshRG.addActionListener(this);
        SeeSbjInfobutton.addActionListener(this);
    }

    public void addSortSubjectButtonGroup() {
        sortButtonGroup.add(SortLssASCbtn);
        sortButtonGroup.add(SortLssDESbtn);
        sortButtonGroup.add(SortNameazbtn);
        sortButtonGroup.add(SortNamezabtn);
    }

    public void addFindSubjectLabelGroup() {
        findButtonGroup.add(findSbjByNameLabel);
        findButtonGroup.add(findSbjByLssLabel);
    }

    public void addNewSubject() {
        AddNewSubjectDialog addNewSubjectDialog = new AddNewSubjectDialog(this, rootPaneCheckingEnabled);
        addNewSubjectDialog.setSbj_list(subjects_list);
        addNewSubjectDialog.setVisible(true);
    }

    public void editSubject() {
        if (subjects_list.size() > 0) {
            editedSbjIndex = TbSubj.getSelectedRow();
            if (editedSbjIndex != -1) {
                EditSubjectDialog editSubjectDialog = new EditSubjectDialog(this, rootPaneCheckingEnabled);
                editSubjectDialog.setsbjs_list(subjects_list);
                editSubjectDialog.setEditedIndex(editedSbjIndex);
                editSubjectDialog.setTxtId(subjects_list.get(editedSbjIndex).getSubj_Id());
                editSubjectDialog.setTxtName(subjects_list.get(editedSbjIndex).getSubj_Name());
                editSubjectDialog.setType(subjects_list.get(editedSbjIndex).getType());
                editSubjectDialog.setTxtnumOfLss(subjects_list.get(editedSbjIndex).getNumOfLessons());
                editSubjectDialog.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để sửa!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Danh sách môn học rỗng!");
        }
    }

    public void deleteSubject() {
        if (subjects_list.size() > 0) {
            deleteSbjIndex = TbSubj.getSelectedRow();
            if (deleteSbjIndex != -1) {
                int result = JOptionPane.showConfirmDialog(rootPane, "Bạn chắc chắn muốn xóa bản ghi này chứ?");
                if (result == JOptionPane.YES_OPTION) {
                    deleteSubjectinDB(subjects_list.get(deleteSbjIndex).getSubj_Id());
                    deleteSubjectinTB(deleteSbjIndex);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Danh sách môn học rỗng!");
        }
    }

    public void sortSubjects(Object obj) {
        if (obj.equals(SortLssDESbtn)) {
            subjects_list.sort(new DESSort());
            tableModel.setRowCount(0);
            showAllSubjects(subjects_list);
        } else if (obj.equals(SortLssASCbtn)) {
            subjects_list.sort(new ASCSort());
            tableModel.setRowCount(0);
            showAllSubjects(subjects_list);
        } else if (obj.equals(SortNameazbtn)) {
            subjects_list.sort(new AZSort());
            tableModel.setRowCount(0);
            showAllSubjects(subjects_list);
        } else if (obj.equals(SortNamezabtn)) {
            subjects_list.sort(new ZASort());
            tableModel.setRowCount(0);
            showAllSubjects(subjects_list);
        }
    }

    public void findSubject() {
        if (findSbjByNameLabel.isSelected()) {
            int numOfResult = 0;
            String vague_name = txtFindSbjByName.getText();
            boolean deletedAll = false;

            if (!vague_name.isEmpty()) {
                for (int i = 0; i < subjects_list.size(); i++) {
                    if (subjects_list.get(i).getSubj_Name().contains(vague_name)
                            || subjects_list.get(i).getSubj_Name().toLowerCase().contains(vague_name)) {
                        if (deletedAll == false) {
                            tableModel.setRowCount(0);
                            deletedAll = true;
                        }
                        showSubject(subjects_list.get(i));
                        numOfResult++;
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResult + " kết quả!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Thông tin không được để trống!");
            }
        } else if (findSbjByLssLabel.isSelected()) {
            int numOfResultLss = 0;
            Pattern pattern = Pattern.compile("^[0-9]+$");
            String fr = txtSbjFrom.getText();
            String td = txtSbjTo.getText();
            boolean deletedAll = false;

            if (pattern.matcher(fr).matches() && pattern.matcher(td).matches()) {
                int fr_ = Integer.parseInt(fr);
                int td_ = Integer.parseInt(td);

                for (int i = 0; i < subjects_list.size(); i++) {
                    if (fr_ <= subjects_list.get(i).getNumOfLessons() && subjects_list.get(i).getNumOfLessons() <= td_) {
                        if (deletedAll == false) {
                            tableModel.setRowCount(0);
                            deletedAll = true;
                        }
                        showSubject(subjects_list.get(i));
                        numOfResultLss++;
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResultLss + " kết quả!");
            } else {
                if (!fr.isEmpty() && !td.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "Số tiết học không hợp lệ!");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Thông tin không được để trống!");
                }
            }
        }
    }

    public void refreshSubject() {
        tableModel.setRowCount(0);
        subjects_list = readSubjectsFromDB();
        showAllSubjects(subjects_list);
    }

    public void addNewStudent() {
        AddNewStudentDialog addNewStudentDialog = new AddNewStudentDialog(this, rootPaneCheckingEnabled);
        addNewStudentDialog.setStd_list(students_list);
        addNewStudentDialog.setVisible(true);
    }

    public void editStudent() {
        if (students_list.size() > 0) {
            editedStdIndex = TbStudent.getSelectedRow();
            if (editedStdIndex != -1) {
                EditStudentDialog editStudentDialog = new EditStudentDialog(this, rootPaneCheckingEnabled);
                editStudentDialog.setStd_list(students_list);
                editStudentDialog.seteditedStdIndex(editedStdIndex);
                editStudentDialog.setTxtPs_id(students_list.get(editedStdIndex).getPs_id());
                editStudentDialog.setFullName(students_list.get(editedStdIndex).getFullName());
                editStudentDialog.setTxtAddress(students_list.get(editedStdIndex).getAddress());
                editStudentDialog.setTxtBirthDate(students_list.get(editedStdIndex).getBirthDate());
                editStudentDialog.setTxtEmail(students_list.get(editedStdIndex).getEmail());
                editStudentDialog.setTxtPhoneNumber(students_list.get(editedStdIndex).getPhoneNumber());
                editStudentDialog.setTxtStd_id(students_list.get(editedStdIndex).getStd_id());
                editStudentDialog.setTxtStd_class(students_list.get(editedStdIndex).getStd_class());
                editStudentDialog.setCbbMajor(students_list.get(editedStdIndex).getMajor());
                editStudentDialog.setTxtAcyear(students_list.get(editedStdIndex).getAcademic_year());
                editStudentDialog.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để sửa!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Danh sách sinh viên rỗng!");
        }

    }

    public void deleteStudent() {
        if (students_list.size() > 0) {
            deleteStdIndex = TbStudent.getSelectedRow();
            if (deleteStdIndex != -1) {
                int result = JOptionPane.showConfirmDialog(rootPane, "Bạn chắc chắn muốn xóa bản ghi này chứ?");
                if (result == JOptionPane.YES_OPTION) {
                    deleteStudentinDB(students_list.get(deleteStdIndex).getStd_id());
                    deleteStudentinTB(deleteStdIndex);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Danh sách sinh viên rỗng!");
        }
    }

    public void addSortStudentButtonGroup() {
        StudentSortbuttonGroup.add(SortStdNameazbtn);
        StudentSortbuttonGroup.add(SortStdNamezabtn);
        StudentSortbuttonGroup.add(SortStdBDLtoE);
        StudentSortbuttonGroup.add(SortStdBDEtoL);
    }

    public void SortStudent(Object obj) {
        if (obj.equals(SortStdNameazbtn)) {
            students_list.sort(new AZNameSort_Std());
            tableMode2.setRowCount(0);
            showAllStudents(students_list);
        } else if (obj.equals(SortStdNamezabtn)) {
            students_list.sort(new ZANameSort_Std());
            tableMode2.setRowCount(0);
            showAllStudents(students_list);
        } else if (obj.equals(SortStdBDEtoL)) {
            students_list.sort(new SortStdBDEtoL());
            tableMode2.setRowCount(0);
            showAllStudents(students_list);
        } else if (obj.equals(SortStdBDLtoE)) {
            students_list.sort(new SortStdBDLtoE());
            tableMode2.setRowCount(0);
            showAllStudents(students_list);
        }
    }

    public void addFindStudentButtonGroup() {
        FindStudentbuttonGroup.add(findStdByNameLabel);
        FindStudentbuttonGroup.add(findStdByIdLabel);
        FindStudentbuttonGroup.add(findStdByMajorLabel);
    }

    public void findStudent() {
        if (findStdByNameLabel.isSelected()) {
            int numOfResult1 = 0;
            String vague_name = txtFindStdByName.getText();
            boolean deletedAll = false;

            if (!vague_name.isEmpty()) {
                for (int i = 0; i < students_list.size(); i++) {
                    if ((students_list.get(i).getFullName().contains(vague_name))
                            || students_list.get(i).getFullName().toLowerCase().contains(vague_name)) {
                        if (deletedAll == false) {
                            tableMode2.setRowCount(0);
                            deletedAll = true;
                        }
                        showStudent(students_list.get(i));
                        numOfResult1++;
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResult1 + " kết quả!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Thông tin không được để trống!");
            }
        } else if (findStdByIdLabel.isSelected()) {
            int numOfResult2 = 0;
            String std_id = txtFindStdById.getText();
            boolean deletedAll = false;

            if (!std_id.isEmpty()) {
                for (int i = 0; i < students_list.size(); i++) {
                    if (students_list.get(i).getStd_id().equals(std_id)) {
                        if (deletedAll == false) {
                            tableMode2.setRowCount(0);
                            deletedAll = true;
                        }
                        showStudent(students_list.get(i));
                        numOfResult2++;
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResult2 + " kết quả!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Thông tin không được để trống!");
            }
        } else if (findStdByMajorLabel.isSelected()) {
            int numOfResult3 = 0;
            String major = CBBFindStd.getSelectedItem().toString();
            boolean deletedAll = false;

            for (int i = 0; i < students_list.size(); i++) {
                if (students_list.get(i).getMajor().equals(major)) {
                    if (deletedAll == false) {
                        tableMode2.setRowCount(0);
                        deletedAll = true;
                    }
                    showStudent(students_list.get(i));
                    numOfResult3++;
                }
            }
            JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResult3 + " kết quả!");
        }
    }

    public void refreshStudent() {
        tableMode2.setRowCount(0);
        students_list = readStudentsFromDB();
        showAllStudents(students_list);
    }

    public Student findStudentByStd_Id(String std_id) {
        for (var std : students_list) {
            if (std.getStd_id().equals(std_id)) {
                return std;
            }
        }
        return null;
    }

    public Subject findSubjectById(String id) {
        for (var sbj : subjects_list) {
            if (sbj.getSubj_Id().equals(id)) {
                return sbj;
            }
        }
        return null;
    }

    public void addNewRegister() {
        AddNewRegisterDialog addNewRegisterDialog = new AddNewRegisterDialog(this, rootPaneCheckingEnabled);
        addNewRegisterDialog.setStd_list(students_list);
        addNewRegisterDialog.setSbj_list(subjects_list);
        addNewRegisterDialog.setRgs_list(registers_list);
        addNewRegisterDialog.setVisible(true);
    }

    public void deleteRegister() {
        if (registers_list.size() > 0) {
            deleteRgsIndex = TBRegister.getSelectedRow();
            if (deleteRgsIndex != -1) {
                int result = JOptionPane.showConfirmDialog(rootPane, "Bạn chắc chắn muốn xóa bản ghi này chứ?");
                if (result == JOptionPane.YES_OPTION) {
                    deleteRegisterinDB(registers_list.get(deleteRgsIndex));
                    deleteRegisterinTB(deleteRgsIndex);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Danh sách đăng ký rỗng!");
        }
    }

    public void sortRegister() {
        int index = CbbSortRegister.getSelectedIndex();
        switch (index) {
            case 0 -> {
                registers_list.sort(new AZNameSort_Rgs());
                tableMode3.setRowCount(0);
                showAllRegisters(registers_list);
            }
            case 1 -> {
                registers_list.sort(new ZANameSort_Rgs());
                tableMode3.setRowCount(0);
                showAllRegisters(registers_list);
            }
            case 2 -> {
                registers_list.sort(new SortRgsEtoL());
                tableMode3.setRowCount(0);
                showAllRegisters(registers_list);
            }
            case 3 -> {
                registers_list.sort(new SortRgsLtoE());
                tableMode3.setRowCount(0);
                showAllRegisters(registers_list);
            }
        }
    }

    public void addFindRgsButtonGroup() {
        FindRgsbuttonGroup.add(FindRgsByStdNamebtn);
        FindRgsbuttonGroup.add(FindRgsByTimebtn);
    }

    private void findRegister() {
        if (FindRgsByStdNamebtn.isSelected()) {
            String std_name = txtFindRgsByStdName.getText();
            boolean deletedAll = false;
            int numOfResult = 0;
            if (!std_name.isEmpty()) {
                for (var rgs : registers_list) {
                    if (rgs.getStudent().getFullName().contains(std_name)
                            || rgs.getStudent().getFullName().toLowerCase().contains(std_name)) {
                        if (deletedAll == false) {
                            tableMode3.setRowCount(0);
                            deletedAll = true;
                        }
                        showRegister(rgs);
                        numOfResult++;
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResult + " kết quả!");

            } else {
                JOptionPane.showMessageDialog(rootPane, "Thông tin không được để trống!");
            }
        } else if (FindRgsByTimebtn.isSelected()) {
            Pattern pattern = Pattern.compile("\\d{2}/\\d{2}/\\d{4}");
            String fr = txtFindRgsByTimefrom.getText();
            String td = txtFindRgsByTimeto.getText();
            int numOfResult = 0;
            boolean deletedAll = false;

            if (pattern.matcher(fr).matches() && pattern.matcher(td).matches()) {
                for (var rgs : registers_list) {
                    if (convertToDate(getDate(rgs.getRegisterDate())).compareTo(convertToDate(fr)) > 0
                            && convertToDate(getDate(rgs.getRegisterDate())).compareTo(convertToDate(td)) < 0) {
                        if (deletedAll == false) {
                            tableMode3.setRowCount(0);
                            deletedAll = true;
                        }
                        showRegister(rgs);
                        numOfResult++;
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Tìm thấy " + numOfResult + " kết quả!");
            } else {
                if (!txtFindRgsByTimefrom.getText().isEmpty() && !txtFindRgsByTimeto.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "Hãy nhập ngày đúng định dạng dd/MM/yyyy");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Thông tin không được để trống!");
                }
            }
        }
    }

    public String getDate(String strdate) {
        var s = strdate.split("\\s");
        return s[1];
    }

    public Date convertToDate(String strdate) {
        try {
            Date date = new SimpleDateFormat("dd/MM/yyyy").parse(strdate);
            return date;
        } catch (ParseException ex) {
            Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public void refreshRegister() {
        tableMode3.setRowCount(0);
        registers_list = readRegisterFromDB();
        showAllRegisters(registers_list);
    }

    public void showSubjectInfo() {
        int index = TbSubj.getSelectedRow();
        if (index != -1) {
            SubjectInfo subjectInfo = new SubjectInfo(this, rootPaneCheckingEnabled);
            subjectInfo.setSubject_list(subjects_list);

            for (var sbj : subjects_list) {
                sbj.setRegisters_list(findRgsListInSbj(sbj.getSubj_Id()));
            }
            Subject subject = subjects_list.get(index);
            subjectInfo.showSbjInfoInTB(subject.getRegisters_list());
            subjectInfo.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(rootPane, "Hãy chọn một môn học để xem thông tin!");
        }

    }

    public ArrayList<Register> findRgsListInSbj(String sbj_id) {
        ArrayList<Register> sbj_registers_list = new ArrayList<>();
        for (var rgs : registers_list) {
            if (rgs.getSubject().getSubj_Id().equals(sbj_id)) {
                sbj_registers_list.add(rgs);
            }
        }
        return sbj_registers_list;
    }

}
